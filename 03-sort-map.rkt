(define (descending a b) 
  (if (> a b) 
      #t 
      #f)) 
(define (ascending a b) 
  (if (< a b) 
      #t 
      #f)) 
(define (remove-element list element) 
       (if (null? list) 
           '() 
           (if (= (car element) (caar list)) 
               (cdr list) 
               (cons (car list) (remove-element (cdr list) element))))) 
(define (find-order list element compare-method) 
  (cond ((null? list) element) 
        ((compare-method (caar list) (car element)) (find-order (cdr list) (car list) compare-method)) 
        (else (find-order (cdr list) element compare-method)))) 
(define (sort-map map compare-method) 
  (if (null? map) 
       map 
       (cons (find-order map (car map) compare-method) 
                 (sort-map (remove-element map (find-order map (car map) compare-method))           
     compare-method)))) 